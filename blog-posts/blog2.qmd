---
title: "Using the `purrr` ~ shortcut in your own custom functions"
description: ""
date: "11/14/22"
image: ""
---

### Functionals basics

```{r, message = F, warning = F}
library(purrr)
```


Functionals are defined as functions that take a function as input and return a vector as output. The simplest non-base R way to do this is by using a `purrr::map_*()` function. These functions simply apply the user specified function to each element in the input vector and returns an object with the same number of elements as the input.

```{r}
square <- function(x) x ^ 2
map_dbl(1:3, square)
```


We can simplify this by making use of anyonymous functions and shortcuts. First we can define our function inside of `map_dbl` and since we don't have to bind it to a name it is considered an anonymous function:

```{r}
map_dbl(1:3, function(x) x ^ 2)
```

Next we can use a special `purrr` shortcut to simplify this code even further

```{r}
map_dbl(1:3, ~ .x ^ 2)
```


This code is wonderfully clean and concise and it sure would be nice if we could write our own functions that use the same syntax.


```{r}
all_met <- function(.x, .f, ...){ 
  .f <- as_mapper(.f, ...)
  
  for (i in .x) { 
    if (!.f(i, ...)) {
      return(FALSE)
    }   
  TRUE
  }
}

all_met(2:3, ~ .x > 1)
```




